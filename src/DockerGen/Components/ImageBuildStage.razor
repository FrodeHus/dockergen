@using DockerGen.Container
@using DockerGen.Features.Container.Store
@inherits FluxorComponent
@inject IState<ContainerState> State
@inject IDispatcher Dispatcher

<MatDialog @bind-IsOpen="@IsConfigureDialogOpen">
    <MatDialogTitle>Configure build stage</MatDialogTitle>
    <MatDialogContent>
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                    <MatTextField Label="Stage name" FullWidth="true" @bind-Value="_editImage.StageName"></MatTextField>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                    <MatTextField Label="Image" FullWidth="true" @bind-Value="_editImage.ImageName" list="stages"></MatTextField>
                    <datalist id="stages">
                        @foreach (var stage in State.Value.Container?.Stages)
                        {
                            <option value="@stage.BaseImage.StageName">@stage.StageName</option>
                        }
                    </datalist>

                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <MatTextField Label="Tag" @bind-Value="_editImage.Tag"></MatTextField>
                </div>
            </div>
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="CloseConfigureDialog">Cancel</MatButton>
        <MatButton OnClick="OnOk">Save</MatButton>
    </MatDialogActions>
</MatDialog>


<div class="mat-elevation-z3 build-stage__container">
    <div class="build-stage__title">
        <div class="stage-name">
            <span class="name">@Stage.StageName</span>
        </div>
        <div class="baseimage">
            @if (!string.IsNullOrEmpty(@Stage.BaseImage.Image))
            {
                <span class="baseimage image">@Stage.BaseImage.Image</span>
            }
            else
            {
                <MatButton Label="Configure base image" OnClick="OpenConfigureDialog"></MatButton>
            }
            @if (!string.IsNullOrEmpty(Stage.BaseImage.Tag))
            {
                <span class="baseimage tag">@Stage.BaseImage.Tag</span>
            }
        </div>
        <div>
            <MatIconButton Icon="settings" OnClick="OpenConfigureDialog"></MatIconButton>
            <MatIconButton Icon="close" OnClick="RemoveStage"></MatIconButton>
        </div>
    </div>
    @if (Stage.Instructions.Count == 0)
    {
        <div class="dropzone-active"></div>
    }
    <InstructionList Stage="Stage" OnStartDrag="OnStartDrag"></InstructionList>

</div>

@code {

    [Parameter]
    public BuildStage Stage { get; set; }
    [Parameter]
    public EventCallback<IInstruction> OnStartDrag { get; set; }

    private EditImage _editImage { get; set; } = new EditImage();
    private bool IsConfigureDialogOpen { get; set; }

    private void RemoveStage()
    {
        Dispatcher.Dispatch(new ContainerRemoveBuildStageAction(Stage));
        Dispatcher.Dispatch(new ContainerUpdatedAction());
    }

    private void OpenConfigureDialog()
    {
        _editImage = new EditImage
        {
            StageName = Stage.BaseImage.StageName,
            ImageName = Stage.BaseImage.Image,
            Tag = Stage.BaseImage.Tag
        };
        IsConfigureDialogOpen = true;
    }

    private void CloseConfigureDialog()
    {
        IsConfigureDialogOpen = false;
    }

    private void OnOk()
    {
        CloseConfigureDialog();
        Stage.BaseImage.StageName = _editImage.StageName;
        Stage.BaseImage.Image = _editImage.ImageName;
        Stage.BaseImage.Tag = _editImage.Tag;

        Dispatcher.Dispatch(new ContainerSetStateAction(State.Value));
        Dispatcher.Dispatch(new ContainerUpdatedAction());
    }

    private class EditImage
    {
        public string StageName { get; set; }
        public string ImageName { get; set; }
        public string Tag { get; set; }
    }
}
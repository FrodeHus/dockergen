@using DockerGen.Container
@using DockerGen.Features.Container.Store
@inherits FluxorComponent
@inject IState<ContainerState> State
@inject IDispatcher Dispatcher

<DGDialog Show="IsConfigureDialogOpen" OnOk="OnOk" OnCancel="CloseConfigureDialog">
    <Title>
        Configure build stage
    </Title>
    <Body>
        <div>
            <input type="text" @bind="Stage.StageName" />
        </div>
        <div>
            <FromImage Instruction="@Stage.BaseImage"></FromImage>
        </div>
    </Body>
</DGDialog>

<div class="image-container-build-stage">
    <div class="build-stage__title">
        <div class="stage-name">
            <span class="name">@Stage.StageName</span>
            <div class="baseimage">
                <span class="baseimage image">@Stage.BaseImage.Image</span>
                @if (!string.IsNullOrEmpty(Stage.BaseImage.Tag))
                {
                    <span class="baseimage tag">@Stage.BaseImage.Tag</span>
                }
            </div>
            <a href="#" aria-label="Edit stage name" class="button" @onclick="(() => IsConfigureDialogOpen = true)">
                <i class="fa fa-edit" />
            </a>
        </div>
        <a href="#" aria-label="Close" @onclick="RemoveStage" class="button close">
            <i class="fa fa-window-close" />
        </a>
    </div>
    @if (Stage.BaseImage == null)
    {
        <pre>TODO: implement adding build args and setting FROM image</pre>
    }
    else
    {

    }
    @if (Stage.Instructions.Count == 0)
    {
        <div class="dropzone-active"></div>
    }
    <InstructionList Stage="Stage" OnStartDrag="OnStartDrag"></InstructionList>

</div>

@code {

    [Parameter]
    public BuildStage Stage { get; set; }
    [Parameter]
    public EventCallback<IInstruction> OnStartDrag { get; set; }

    private bool IsConfigureDialogOpen { get; set; }

    private void RemoveStage()
    {
        Dispatcher.Dispatch(new ContainerRemoveBuildStageAction(Stage));
        Dispatcher.Dispatch(new ContainerUpdatedAction());
    }

    private void CloseConfigureDialog()
    {
        IsConfigureDialogOpen = false;
    }

    private void OnOk()
    {
        CloseConfigureDialog();
        Dispatcher.Dispatch(new ContainerSetStateAction(State.Value));
        Dispatcher.Dispatch(new ContainerUpdatedAction());
    }
}
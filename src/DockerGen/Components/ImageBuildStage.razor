@using DockerGen.Container
@using DockerGen.Features.Container.Store
@inherits FluxorComponent
@inject IState<ContainerState> State
@inject IDispatcher Dispatcher
<div class="image-container-build-stage">

    <div class="build-stage__title">
        <label class="label">BUILD STAGE</label>
        <div class="stage-name">
            @if (IsEditing)
            {
                <input type="text" @bind="Stage.StageName" @onfocusout="ToggleEdit" />
            }
            else
            {
                <span class="name">@Stage.StageName</span>
            }
            <a href="#" aria-label="Edit stage name" class="button" @onclick="ToggleEdit">
                <i class="fa @GetButtonIcon()" />
            </a>
        </div>
        <a href="#" aria-label="Close" @onclick="RemoveStage" class="button">
            <i class="fa fa-window-close" />
        </a>
    </div>
    @if (Stage.BaseImage == null)
    {
        <pre>TODO: implement adding build args and setting FROM image</pre>
    }
    else
    {
        <FromImage Instruction="@Stage.BaseImage"></FromImage>
    }
    @if (Stage.Instructions.Count == 0)
    {
        <div class="dropzone-active"></div>
    }
    <InstructionList Stage="Stage" OnStartDrag="OnStartDrag"></InstructionList>

</div>

@code {

    [Parameter]
    public BuildStage Stage { get; set; }
    [Parameter]
    public EventCallback<IInstruction> OnStartDrag { get; set; }

    private bool IsEditing { get; set; }

    private void RemoveStage()
    {
        Dispatcher.Dispatch(new ContainerRemoveBuildStageAction(Stage));
        Dispatcher.Dispatch(new ContainerUpdatedAction());
    }

    private void ToggleEdit()
    {
        IsEditing = !IsEditing;
        Dispatcher.Dispatch(new ContainerSetStateAction(State.Value));
        Dispatcher.Dispatch(new ContainerUpdatedAction());
    }

    private string GetButtonIcon()
    {
        if (IsEditing)
        {
            return "fa-save";
        }
        return "fa-edit";
    }
}
@using DockerGen.Container
@using DockerGen.Features.Container.Store
@inherits FluxorComponent
@inject IState<ContainerState> State
@inject IDispatcher Dispatcher

<MatDialog @bind-IsOpen="@IsConfigureDialogOpen">
    <MatDialogTitle>Configure build stage</MatDialogTitle>
    <MatDialogContent>
        <div class="dgform">
            <div class="input-group mb-3">
                <span class="input-group-text">Stage name</span>
                <input name="stageName" class="form-control" type="text" @bind="_editImage.StageName" />

            </div>
            <div class="input-group mb-3">
                <span class="input-group-text">Image</span>
                <input name="imageName" class="form-control" type="text" @bind="_editImage.ImageName" list="stages" />
                <datalist id="stages">
                    @foreach (var stage in State.Value.Container.Stages)
                    {
                        <option value="@stage.BaseImage.StageName">@stage.StageName</option>
                    }
                </datalist>
                <span class="input-group-text">Tag</span>
                <input name="imageTag" class="form-control" type="text" @bind="_editImage.Tag" />
            </div>
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="CloseConfigureDialog">Cancel</MatButton>
        <MatButton OnClick="OnOk">Save</MatButton>
    </MatDialogActions>
</MatDialog>


<div class="image-container-build-stage">
    <div class="build-stage__title">
        <div class="stage-name">
            <span class="name">@Stage.StageName</span>
        </div>
        <div class="baseimage">
            <span class="baseimage image">@Stage.BaseImage.Image</span>
            @if (!string.IsNullOrEmpty(Stage.BaseImage.Tag))
            {
                <span class="baseimage tag">@Stage.BaseImage.Tag</span>
            }
        </div>
        <div>
            <a href="#" aria-label="Edit stage name" class="button" @onclick="OpenConfigureDialog">
                <i class="fa fa-edit" />
            </a>
            <a href="#" aria-label="Close" @onclick="RemoveStage" class="button close">
                <i class="fa fa-window-close" />
            </a>
        </div>
    </div>
    @if (Stage.Instructions.Count == 0)
    {
        <div class="dropzone-active"></div>
    }
    <InstructionList Stage="Stage" OnStartDrag="OnStartDrag"></InstructionList>

</div>

@code {

    [Parameter]
    public BuildStage Stage { get; set; }
    [Parameter]
    public EventCallback<IInstruction> OnStartDrag { get; set; }

    private EditImage _editImage { get; set; }
    private bool IsConfigureDialogOpen { get; set; }

    private void RemoveStage()
    {
        Dispatcher.Dispatch(new ContainerRemoveBuildStageAction(Stage));
        Dispatcher.Dispatch(new ContainerUpdatedAction());
    }

    private void OpenConfigureDialog()
    {
        _editImage = new EditImage
        {
            StageName = Stage.BaseImage.StageName,
            ImageName = Stage.BaseImage.Image,
            Tag = Stage.BaseImage.Tag
        };
        IsConfigureDialogOpen = true;
    }

    private void CloseConfigureDialog()
    {
        IsConfigureDialogOpen = false;
    }

    private void OnOk()
    {
        CloseConfigureDialog();
        Stage.BaseImage.StageName = _editImage.StageName;
        Stage.BaseImage.Image = _editImage.ImageName;
        Stage.BaseImage.Tag = _editImage.Tag;

        Dispatcher.Dispatch(new ContainerSetStateAction(State.Value));
        Dispatcher.Dispatch(new ContainerUpdatedAction());
    }

    private class EditImage
    {
        public string StageName { get; set; }
        public string ImageName { get; set; }
        public string Tag { get; set; }
    }
}
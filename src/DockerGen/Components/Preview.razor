@using DockerGen.Features.Container.Store
@using DockerGen.Infrastructure
@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<ContainerState> State
@inject IJSRuntime JS

<div class="preview">
    <div class="panel">
        <div class="preview-label">
            dockerfile
        </div>
        <div class="editor">
            <pre class="code">
                <code class="language-dockerfile">
                    @Dockerfile
                </code>
            </pre>
        </div>
    </div>
</div>

@code {
    private string Dockerfile { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SubscribeToAction<ContainerUpdatedAction>(_ => UpdateEditor());
        SubscribeToAction<ContainerLoadStateSuccessAction>(_ => UpdateEditor());
        SubscribeToAction<ContainerLoadDockerfileFromStringSuccessAction>(_ => UpdateEditor());
        SubscribeToAction<ContainerClearStateSuccessAction>(_ => UpdateEditor());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        //await JS.InvokeVoidAsync("hljs.highlightAll");
    }

    private void UpdateEditor()
    {
        Dockerfile = GetCompiledDockerfile();
    }

    private string GetCompiledDockerfile()
    {
        var dockerFile = State.Value.Container.Compile();

        return dockerFile ?? "";
    }
}

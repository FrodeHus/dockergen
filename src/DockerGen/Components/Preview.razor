@using BlazorMonaco
@using DockerGen.Features.Container.Store
@using DockerGen.Infrastructure
@inherits FluxorComponent
@inject ClipboardService Clipboard
@inject IDispatcher Dispatcher
@inject IState<ContainerState> State
<div class="preview @toggleClass">
	<div class="toolbar">
		<a href="#" class="panel-button" @onclick="Toggle">
			<i class="fa fa-bars" />
		</a>
	</div>
	<div class="panel">
		<div class="preview-label">
			dockerfile
		</div>
		<div class="editor @toggleClass">
			<MonacoEditor @ref="_editor" ConstructionOptions=EditorConstructionOptions OnKeyUp="UpdateContainer" />
		</div>
	</div>
</div>

@code {
	private MonacoEditor _editor;
	private string toggleClass = "open";
	private void Toggle()
	{		
		if (!State.Value.SidePanelOpen)
		{
			toggleClass = "open";
			Dispatcher.Dispatch(new ContainerPanelOpenAction());
		}
		else
		{
			toggleClass = "closed";
			Dispatcher.Dispatch(new ContainerPanelCloseAction());
		}
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		toggleClass = State.Value.SidePanelOpen ? "open":"closed";
		SubscribeToAction<ContainerUpdatedAction>(_ => UpdateEditor());
		SubscribeToAction<ContainerLoadStateSuccessAction>(_ => UpdateEditor());
		SubscribeToAction<ContainerClearStateSuccessAction>(_ => UpdateEditor());
	}

	private async Task UpdateContainer(KeyboardEvent _)
	{
		var dockerfile = await _editor.GetValue();
		try
		{
			Dispatcher.Dispatch(new ContainerLoadDockerfileFromStringAction(dockerfile));
			Dispatcher.Dispatch(new ContainerLoadDockerfileFromStringSuccessAction());
		}
		catch (Exception ex)
		{
			Dispatcher.Dispatch(new ContainerLoadDockerfileFromStringFailureAction(ex.Message));
		}
	}

	private void UpdateEditor()
	{
		_editor.SetValue(GetCompiledDockerfile());
	}

	private string GetCompiledDockerfile()
	{
		var dockerFile = State.Value.Container.Compile();
		if (string.IsNullOrEmpty(dockerFile))
		{
			return "# No instructions found - try adding one now or copy/paste an existing Dockerfile!";
		}

		return dockerFile;
	}

	private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor _)
	{
		return new StandaloneEditorConstructionOptions
		{
			AutomaticLayout = true,
			FormatOnType = true,
			FormatOnPaste = true,
			Language = "dockerfile",
			Value = GetCompiledDockerfile(),
			Minimap = new EditorMinimapOptions { Enabled = false }
		};
	}
}

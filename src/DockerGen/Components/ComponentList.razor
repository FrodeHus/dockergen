@using DockerGen.Container
@using System.Reflection
@using DockerGen.Container.Recipes
@using DockerGen.Features.Container.Store
@inject ContainerService _containerService
@inject IState<ContainerState> State
@inject IDispatcher Dispatcher
<div class="accordion">
    <div class="accordion__item">
        <input type="checkbox" id="dockerComponents" checked>
        <label class="accordion__item-label" for="dockerComponents">Docker instructions</label>

        <div class="accordion__item-content">
            <ul class="component-list">
                @foreach (var component in AvailableComponents)
                {
                    <InstructionComponent Title="@component.DisplayName" OnDrag="StartDrag" CssClass="component" Instruction="component"></InstructionComponent>
                }
            </ul>
        </div>
    </div>
    <div class="accordion__item">
        <input type="checkbox" id="recipes">
        <label class="accordion__item-label" for="recipes">Recipes</label>

        <div class="accordion__item-content">
            <ul class="component-list">
                @foreach (var recipe in AvailableRecipes)
                {
                    <RecipeComponent Recipe="recipe" OnDrag="StartDrag"></RecipeComponent>
                }

            </ul>
        </div>
    </div>
    <div class="accordion__item">
        <input type="checkbox" id="recipesStage">
        <label class="accordion__item-label" for="recipesStage">Stage recipes</label>

        <div class="accordion__item-content">
            <pre>Not implemented</pre>
        </div>
    </div>
</div>
@code {
    private List<IDockerInstruction> AvailableComponents { get; set; } = new();
    private List<Recipe> AvailableRecipes { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        AvailableComponents = _containerService.GetValidInstructions();
        AvailableRecipes = await _containerService.GetValidRecipesAsync();
    }
    private void StartDrag(object component)
    {
        if (component is Recipe recipe)
        {
            Dispatcher.Dispatch(new ContainerSetCurrentInstructionAction(new DynamicRecipe(recipe)));
        }
        else if (component is IInstruction instruction)
        {
            var instance = (Instruction)Activator.CreateInstance(instruction.GetType());
            Dispatcher.Dispatch(new ContainerSetCurrentInstructionAction(instance));
        }
    }
   }

@using DockerGen.Container
@using System.Reflection
@using DockerGen.Container.Recipes
@using DockerGen.Features.Container.Store
@inherits FluxorComponent
@inject ContainerService _containerService
@inject IState<ContainerState> State
@inject IDispatcher Dispatcher
<div class="componentlist">
    <MatAccordion>
        <MatExpansionPanel Expanded>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Docker instructions</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                @foreach (var component in AvailableComponents)
                {
                    <MatPaper Class="component-card" Elevation="2" draggable="true" @ondrag:preventDefault @ondragstart="(() => StartDragHandler(component))" @ondragend="(() => StartDragHandler(null))">
                        <MatTooltip Tooltip="@component.Description" Position="@MatTooltipPosition.Right">
                            <div @ref="context.Current" class="componentlist__item" data-prefix="@component.Prefix">                               
                                @component.DisplayName
                            </div>
                        </MatTooltip>
                    </MatPaper>
                }
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Compound recipes</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                @foreach (var recipe in State.Value.Recipes)
                {
                    <MatPaper Class="component-card" Elevation="2" draggable="true" @ondrag:preventDefault @ondragstart="(() => StartDragHandler(recipe))" @ondragend="(() => StartDragHandler(null))">
                        <MatTooltip Tooltip="@recipe.Description" Position="@MatTooltipPosition.Right">
                            <div @ref="context.Current" class="componentlist__item">@recipe.Name</div>
                        </MatTooltip>
                    </MatPaper>

                }
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

    </MatAccordion>
</div>
@code {
    [CascadingParameter]
    public Features.Container.Pages.Index Editor { get; set; }
    [Parameter]
    public EventCallback<IInstruction> OnStartDrag { get; set; }

    private List<IDockerInstruction> AvailableComponents { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AvailableComponents = _containerService.GetValidInstructions().Where(c => c.Prefix != "FROM").OrderBy(c => c.Prefix).ToList();
    }
    private void StartDragHandler(object component)
    {
        IInstruction currentInstruction = null;
        if (component is Recipe recipe)
        {
            currentInstruction = new DynamicRecipe(recipe);
        }
        else if (component is IInstruction instruction)
        {
            currentInstruction = (Instruction)Activator.CreateInstance(instruction.GetType());
        }

        OnStartDrag.InvokeAsync(currentInstruction);
    }

   }

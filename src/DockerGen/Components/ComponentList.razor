@using DockerGen.Container
@using System.Reflection
@using DockerGen.Container.Recipes
@using DockerGen.Features.Container.Store
@inherits FluxorComponent
@inject ContainerService _containerService
@inject IState<ContainerState> State
@inject IDispatcher Dispatcher
<div class="componentlist">
    <MatAccordion Multi="true">
        <MatExpansionPanel Expanded>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Docker instructions</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                @foreach (var component in AvailableComponents)
                {
                    <MatCard Class="component-card" draggable="true" @ondrag:preventDefault @ondragstart="(() => StartDragHandler(component))" @ondragend="(() => StartDragHandler(null))">
                        <MatCardContent>
                            <MatHeadline6>@component.DisplayName</MatHeadline6>
                            <MatBody2>
                                @component.Description
                            </MatBody2>
                        </MatCardContent>
                    </MatCard>
                }
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Compound recipes</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <ul class="component-list">
                    @if (State.Value.Recipes == null)
                    {
                        <li>Loading recipes...</li>
                    }
                    else
                    {
                        @foreach (var recipe in State.Value.Recipes)
                        {
                            <MatCard Class="component-card" draggable="true" @ondrag:preventDefault @ondragstart="(() => StartDragHandler(recipe))" @ondragend="(() => StartDragHandler(null))">
                                <MatCardContent>
                                    <MatHeadline6>@recipe.Name</MatHeadline6>
                                    <MatBody2>
                                        @recipe.Description
                                    </MatBody2>
                                </MatCardContent>
                            </MatCard>

                        }
                    }
                </ul>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

    </MatAccordion>
</div>
@code {
    [CascadingParameter]
    public Features.Container.Pages.Index Editor { get; set; }
    [Parameter]
    public EventCallback<IInstruction> OnStartDrag { get; set; }

    private List<IDockerInstruction> AvailableComponents { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AvailableComponents = _containerService.GetValidInstructions();
    }
    private void StartDragHandler(object component)
    {
        IInstruction currentInstruction = null;
        if (component is Recipe recipe)
        {
            currentInstruction = new DynamicRecipe(recipe);
        }
        else if (component is IInstruction instruction)
        {
            currentInstruction = (Instruction)Activator.CreateInstance(instruction.GetType());
        }

        OnStartDrag.InvokeAsync(currentInstruction);
    }

   }

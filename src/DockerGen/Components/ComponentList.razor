@using DockerGen.Container
@using System.Reflection
@using DockerGen.Container.Recipes
@using DockerGen.Features.Container.Store
@inherits FluxorComponent
@inject ContainerService _containerService
@inject IState<ContainerState> State
@inject IDispatcher Dispatcher
<div class="componentlist">
    <div class="accordion">
        <div class="accordion__item">
            <input type="checkbox" id="dockerComponents" checked>
            <label class="accordion__item-label" for="dockerComponents">Docker instructions</label>

            <div class="accordion__item-content">
                <ul class="component-list">
                    @foreach (var component in AvailableComponents)
                    {
                        <InstructionComponent Title="@component.DisplayName" OnDrag="StartDrag" CssClass="component" Instruction="component"></InstructionComponent>
                    }
                </ul>
            </div>
        </div>
        <div class="accordion__item">
            <input type="checkbox" id="recipes">
            <label class="accordion__item-label" for="recipes">Recipes</label>

            <div class="accordion__item-content">
                <ul class="component-list">
                    @if (State.Value.Recipes == null)
                    {
                        <li>Loading recipes...</li>
                    }
                    else
                    {
                        @foreach (var recipe in State.Value.Recipes)
                        {
                            <RecipeComponent Recipe="recipe" OnDrag="StartDrag"></RecipeComponent>
                        }
                    }
                </ul>
            </div>
        </div>
        <div class="accordion__item">
            <input type="checkbox" id="recipesStage">
            <label class="accordion__item-label" for="recipesStage">Stage recipes</label>

            <div class="accordion__item-content">
                <pre>Not implemented</pre>
            </div>
        </div>
    </div>
</div>
@code {
    [CascadingParameter]
    public Features.Container.Pages.Index Editor{get;set;}
    private List<IDockerInstruction> AvailableComponents { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AvailableComponents = _containerService.GetValidInstructions();
    }
    private void StartDrag(object component)
    {
        Editor.IsDragging = true;
        if (component is Recipe recipe)
        {
            Editor.CurrentInstruction = new DynamicRecipe(recipe);
        }
        else if (component is IInstruction instruction)
        {
            var instance = (Instruction)Activator.CreateInstance(instruction.GetType());
            Editor.CurrentInstruction = instance;
        }
    }
   }

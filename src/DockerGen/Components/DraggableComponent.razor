@using DockerGen.Container
@using DockerGen.Features.Container.Store
@inherits FluxorComponent
@inject ContainerService ContainerService
@inject IDispatcher Dispatcher
<MatPaper Outlined="true" draggable="true" @ondragstart="@(() => OnDragStartHandler(Instruction))" @ondragend="@(() => OnDragStartHandler(null))">
    <div class="instruction-card">
        <input type="checkbox" checked class="toggle" id="@Instruction.Id">
        <div class="instruction-card__header">
            <label for="@Instruction.Id" class="lbl-toggle">@Instruction.DisplayName</label>
            <MatIconButton Icon="delete" OnClick="() => ParentList.RemoveInstruction(Instruction)"></MatIconButton>
        </div>
        <div class="instruction-card__content">
            <DynamicComponent Type="@ContainerService.GetMappedUIComponent(Instruction)" Parameters="GetParametersForInstruction(Instruction)"></DynamicComponent>
        </div>
    </div>
</MatPaper>


@code {
    [CascadingParameter]
    public InstructionList ParentList { get; set; }
    [Parameter]
    public IInstruction Instruction { get; set; }
    [Parameter]
    public EventCallback<IInstruction> OnStartDrag { get; set; }


    private Dictionary<string, object> GetParametersForInstruction(IInstruction instruction)
    {
        var paramName = "Instruction";
        if (instruction is DynamicRecipe)
        {
            paramName = "Recipe";
        }
        return new Dictionary<string, object>
    {
    { paramName, instruction}
    };
    }

    private void OnDragStartHandler(IInstruction instruction)
    {
        OnStartDrag.InvokeAsync(instruction);
    }

}
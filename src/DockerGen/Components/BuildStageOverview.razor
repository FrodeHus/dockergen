@using DockerGen.Container
@using DockerGen.Features.Container.Store
@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<ContainerState> State
@inject IJSRuntime JS
<div class="build-stage-overview">
    <div class="wizard">
        @foreach (var stage in State.Value.Container.Stages)
        {

            <div class="wizard__step">
                <div class="wizard__dot">
                    <div class="wizard__connector"></div>
                    <div class="wizard__number" @onclick="(() => ScrollToStage(stage.StageName))">
                        <i class="fab fa-docker"></i>
                    </div>
                    <div class="wizard__connector"></div>
                </div>
                <div class="wizard__step-title">
                    @stage.StageName
                </div>
            </div>
        }
    </div>
    <MatFAB @onclick="AddStage" Class="add-build-stage--btn" Label="Add stage" Icon="add">
    </MatFAB>  
</div>

@code {
    private void AddStage()
    {
        var stage = new BuildStage();
        stage.BaseImage = new FromInstruction("", "");
        var stageCount = State.Value.Container.Stages.Count();
        stage.StageName = "stage" + stageCount;
        Dispatcher.Dispatch(new ContainerAddBuildStageAction(stage));
        Dispatcher.Dispatch(new ContainerUpdatedAction());
    }

    private int GetIndex(BuildStage stage)
    {
        return State.Value.Container.Stages.IndexOf(stage) + 1;
    }

    private async Task ScrollToStage(string stageName){
        await JS.InvokeVoidAsync("scrollToStage", stageName);
    }
}